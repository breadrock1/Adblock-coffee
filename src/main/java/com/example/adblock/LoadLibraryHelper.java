package com.example.adblock;

import com.example.adblock.exception.RustException;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * This private helper class provides functionality to load native libraries into runtime.
 * You have to pass into current library several properties using `pom.xml` or
 * `gradle.properties` by using build systems Maven/Gradle.
 * <p>
 * Warning! If you are using maven to build project be sure that maven plugin creates
 * `my.properties` into ${project.build.outputDirectory} dir path.
 * <p>
 * All native libraries compiled for each available platforms stored into
 * `${project.build.outputDirectory}/lib` path.
 */
class LoadLibraryHelper {

    /**
     * There is major public static method to build library absolute file path and
     * load it by {@see System.load} method.
     *
     * @throws RustException throws if failed to build abs library path or load it.
     */
    public static void loadNativeLibrary() throws RustException {
        try {
            String libraryPath = LoadLibraryHelper.buildLibraryPath();
            System.load(libraryPath);
        } catch (UnsatisfiedLinkError ex) {
            throw new RustException(ex.getMessage());
        }
    }

    /**
     * This method build absolute native library path to further loading it. As default
     * library unpack at package step (maven) to `${project.build.outputDirectory}/lib`
     * directory.
     *
     * @return String An absolute native library file path.
     * @throws RustException throws if failed to get property of libs directory.
     */
    private static String buildLibraryPath() throws RustException {
        Properties properties = LoadLibraryHelper.loadProperties();
        String libsFromProps = properties.getProperty("native.path");
        if (libsFromProps == null) {
            throw new RustException("Native library dir is null");
        }

        String libExtension = LoadLibraryHelper.buildLibraryExtension();
        return new StringBuilder(libsFromProps)
                .append("/libadblock_coffee")
                .append(libExtension)
                .toString();
    }

    /**
     * This method generate extension by current system platform.
     *
     * @return String A native library extension by system platform.
     * @throws RustException throws if failed to detect system platform.
     */
    private static String buildLibraryExtension() throws RustException{
        String osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains("windows")) {
            return ".dll";
        } else if (osName.contains("mac os x")) {
            return  ".dylib";
        } else if (osName.contains("linux")) {
            return ".so";
        } else {
            throw new RustException("Unsupported OS: " + osName);
        }
    }

    /**
     * This method load generated by build system properties from `my.properties` file.
     * It's need to get unpacked library directory path.
     *
     * @return Properties A loaded {@see Properties} properties object.
     * @throws RustException throws if failed to open and load properties file.
     */
    private static Properties loadProperties() throws RustException {
        try {
            InputStream is = LoadLibraryHelper.class.getClassLoader().getResourceAsStream("my.properties");
            Properties properties = new Properties();
            properties.load(is);
            return properties;
        } catch (IOException ex) {
            throw new RustException(ex.getMessage());
        }
    }
}
